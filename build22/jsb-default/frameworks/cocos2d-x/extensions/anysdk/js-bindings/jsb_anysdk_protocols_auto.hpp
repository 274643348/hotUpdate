#pragma once
#include "base/ccConfig.h"

#include "cocos/scripting/js-bindings/jswrapper/SeApi.h"

extern se::Object* __jsb_anysdk_framework_PluginProtocol_proto;
extern se::Class* __jsb_anysdk_framework_PluginProtocol_class;

bool js_register_anysdk_framework_PluginProtocol(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_PluginProtocol_isFunctionSupported);
SE_DECLARE_FUNC(js_anysdk_framework_PluginProtocol_getPluginName);
SE_DECLARE_FUNC(js_anysdk_framework_PluginProtocol_getPluginVersion);
SE_DECLARE_FUNC(js_anysdk_framework_PluginProtocol_setPluginName);
SE_DECLARE_FUNC(js_anysdk_framework_PluginProtocol_getSDKVersion);

extern se::Object* __jsb_anysdk_framework_PluginFactory_proto;
extern se::Class* __jsb_anysdk_framework_PluginFactory_class;

bool js_register_anysdk_framework_PluginFactory(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_PluginFactory_purgeFactory);
SE_DECLARE_FUNC(js_anysdk_framework_PluginFactory_getInstance);

extern se::Object* __jsb_anysdk_framework_PluginManager_proto;
extern se::Class* __jsb_anysdk_framework_PluginManager_class;

bool js_register_anysdk_framework_PluginManager(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_PluginManager_unloadPlugin);
SE_DECLARE_FUNC(js_anysdk_framework_PluginManager_loadPlugin);
SE_DECLARE_FUNC(js_anysdk_framework_PluginManager_end);
SE_DECLARE_FUNC(js_anysdk_framework_PluginManager_getInstance);

extern se::Object* __jsb_anysdk_framework_ProtocolAnalytics_proto;
extern se::Class* __jsb_anysdk_framework_ProtocolAnalytics_class;

bool js_register_anysdk_framework_ProtocolAnalytics(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAnalytics_logTimedEventBegin);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAnalytics_logError);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAnalytics_setCaptureUncaughtException);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAnalytics_setSessionContinueMillis);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAnalytics_startSession);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAnalytics_stopSession);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAnalytics_logTimedEventEnd);

extern se::Object* __jsb_anysdk_framework_ProtocolIAP_proto;
extern se::Class* __jsb_anysdk_framework_ProtocolIAP_class;

bool js_register_anysdk_framework_ProtocolIAP(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolIAP_getPluginId);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolIAP_getOrderId);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolIAP_resetPayState);

extern se::Object* __jsb_anysdk_framework_ProtocolAds_proto;
extern se::Class* __jsb_anysdk_framework_ProtocolAds_class;

bool js_register_anysdk_framework_ProtocolAds(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAds_showAds);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAds_hideAds);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAds_queryPoints);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAds_isAdTypeSupported);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAds_preloadAds);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAds_spendPoints);

extern se::Object* __jsb_anysdk_framework_ProtocolSocial_proto;
extern se::Class* __jsb_anysdk_framework_ProtocolSocial_class;

bool js_register_anysdk_framework_ProtocolSocial(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolSocial_showLeaderboard);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolSocial_signOut);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolSocial_showAchievements);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolSocial_signIn);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolSocial_submitScore);

extern se::Object* __jsb_anysdk_framework_ProtocolUser_proto;
extern se::Class* __jsb_anysdk_framework_ProtocolUser_class;

bool js_register_anysdk_framework_ProtocolUser(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolUser_isLogined);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolUser_getUserID);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolUser_login);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolUser_getPluginId);

extern se::Object* __jsb_anysdk_framework_ProtocolPush_proto;
extern se::Class* __jsb_anysdk_framework_ProtocolPush_class;

bool js_register_anysdk_framework_ProtocolPush(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolPush_startPush);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolPush_closePush);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolPush_delAlias);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolPush_setAlias);

extern se::Object* __jsb_anysdk_framework_ProtocolCrash_proto;
extern se::Class* __jsb_anysdk_framework_ProtocolCrash_class;

bool js_register_anysdk_framework_ProtocolCrash(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolCrash_setUserIdentifier);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolCrash_reportException);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolCrash_leaveBreadcrumb);

extern se::Object* __jsb_anysdk_framework_ProtocolREC_proto;
extern se::Class* __jsb_anysdk_framework_ProtocolREC_class;

bool js_register_anysdk_framework_ProtocolREC(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolREC_share);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolREC_startRecording);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolREC_stopRecording);

extern se::Object* __jsb_anysdk_framework_ProtocolCustom_proto;
extern se::Class* __jsb_anysdk_framework_ProtocolCustom_class;

bool js_register_anysdk_framework_ProtocolCustom(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);

extern se::Object* __jsb_anysdk_framework_ProtocolAdTracking_proto;
extern se::Class* __jsb_anysdk_framework_ProtocolAdTracking_class;

bool js_register_anysdk_framework_ProtocolAdTracking(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAdTracking_onPay);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAdTracking_onLogin);
SE_DECLARE_FUNC(js_anysdk_framework_ProtocolAdTracking_onRegister);

extern se::Object* __jsb_anysdk_framework_AgentManager_proto;
extern se::Class* __jsb_anysdk_framework_AgentManager_class;

bool js_register_anysdk_framework_AgentManager(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_unloadAllPlugins);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_getSocialPlugin);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_getPushPlugin);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_getUserPlugin);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_getAdTrackingPlugin);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_getCustomPlugin);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_getCustomParam);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_loadAllPlugins);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_init);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_isAnaylticsEnabled);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_getChannelId);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_getAdsPlugin);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_setIsAnaylticsEnabled);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_getSharePlugin);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_getAnalyticsPlugin);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_getRECPlugin);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_getCrashPlugin);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_end);
SE_DECLARE_FUNC(js_anysdk_framework_AgentManager_getInstance);

extern se::Object* __jsb_anysdk_framework_JSBRelation_proto;
extern se::Class* __jsb_anysdk_framework_JSBRelation_class;

bool js_register_anysdk_framework_JSBRelation(se::Object* obj);
bool register_all_anysdk_framework(se::Object* obj);
SE_DECLARE_FUNC(js_anysdk_framework_JSBRelation_getMethodsOfPlugin);

